From 51fcb3601069d1b5f1db8199e0f5b2a0778f0cba Mon Sep 17 00:00:00 2001
From: Smosia <0stas0@mail.ru>
Date: Fri, 21 Dec 2018 19:03:30 +0300
Subject: [PATCH] Audio HAL: revers MIUI hal

---
 device/lcsh/lcsh6795_lwt_l/ProjectConfig.mk        |  12 +-
 .../audio/Audio_Customization_Common.h             |   2 +-
 .../AudioALSACaptureDataProviderEchoRef.cpp        |   4 +-
 .../AudioALSACaptureDataProviderEchoRefExt.cpp     |   2 +-
 .../audio/V3/aud_drv/AudioALSAHardware.cpp         |  38 +++-
 .../V3/include/AudioALSAHardwareResourceManager.h  |   1 +
 .../audio/V3/include/AudioVolumeInterface.h        |  18 +-
 .../audio/V3/include/SpeechMessengerECCCI.h        |   1 +
 .../V3/speech_driver/SpeechMessengerECCCI.cpp      |  33 ++-
 .../audio/include/SpeechMessengerInterface.h       |   5 +-
 .../speech_driver/SpeechEnhancementController.cpp  |   6 +
 .../aud_drv/AudioALSAHardwareResourceManager.cpp   |   2 +
 .../audio/aud_drv/AudioALSAVolumeController.cpp    | 224 ++++++++++++---------
 .../audio/include/AudioALSAVolumeController.h      |  20 +-
 14 files changed, 232 insertions(+), 136 deletions(-)

diff --git a/device/lcsh/lcsh6795_lwt_l/ProjectConfig.mk b/device/lcsh/lcsh6795_lwt_l/ProjectConfig.mk
index 9c9190f..089aacc 100644
--- a/device/lcsh/lcsh6795_lwt_l/ProjectConfig.mk
+++ b/device/lcsh/lcsh6795_lwt_l/ProjectConfig.mk
@@ -134,7 +134,7 @@ MTK_ASR_SUPPORT = no
 MTK_ATCI_EM_SUPPORT = yes
 MTK_ATF_SUPPORT = yes
 MTK_ATV_CHIP =
-MTK_AUDENH_SUPPORT = yes
+MTK_AUDENH_SUPPORT = no
 MTK_AUDIO = yes
 MTK_AUDIO_ADPCM_SUPPORT = yes
 MTK_AUDIO_ALAC_SUPPORT = yes
@@ -157,7 +157,7 @@ MTK_AVI_PLAYBACK_SUPPORT = yes
 MTK_BATLOWV_NO_PANEL_ON_EARLY = no
 MTK_BATTERY_PROTECT = no
 MTK_BEAM_PLUS_SUPPORT = yes
-MTK_BESLOUDNESS_SUPPORT = yes
+MTK_BESLOUDNESS_SUPPORT = no
 MTK_BESSURROUND_SUPPORT = yes
 MTK_BG_POWER_SAVING_SUPPORT = yes
 MTK_BG_POWER_SAVING_UI_SUPPORT = yes
@@ -280,7 +280,7 @@ MTK_DSPIRDBG = no
 MTK_DTAG_DUAL_APN_SUPPORT = no
 MTK_DT_SUPPORT = no
 MTK_DUAL_INPUT_CHARGER_SUPPORT = no
-MTK_DUAL_MIC_SUPPORT = no
+MTK_DUAL_MIC_SUPPORT = yes
 MTK_DVFS_DISABLE_LOW_VOLTAGE_SUPPORT = no
 MTK_DX_HDCP_SUPPORT = no
 MTK_EAP_SIM_AKA = yes
@@ -358,7 +358,7 @@ MTK_GPU_SUPPORT = yes
 MTK_HAC_SUPPORT = yes
 MTK_HANDSFREE_DMNR_SUPPORT = yes
 MTK_HDMI_HDCP_SUPPORT = no
-MTK_HDMI_SUPPORT = yes
+MTK_HDMI_SUPPORT = no
 MTK_HEADER_SUPPORT = no
 MTK_HEADSET_ICON_SUPPORT = no
 MTK_HEART_RATE_MONITOR_SUPPORT = no
@@ -389,7 +389,7 @@ MTK_IME_TURKISH_SUPPORT = no
 MTK_IME_VIETNAM_SUPPORT = no
 MTK_IMS_SUPPORT = no
 MTK_INCALL_HANDSFREE_DMNR = no
-MTK_INCALL_NORMAL_DMNR = no
+MTK_INCALL_NORMAL_DMNR = yes
 MTK_INCLUDE_MODEM_DB_IN_IMAGE = yes
 MTK_INPUTMETHOD_COOTEKIME_TOUCHPAL = no
 MTK_INPUTMETHOD_PINYINIME_APP = no
@@ -613,7 +613,7 @@ MTK_THERMAL_PA_VIA_ATCMD = yes
 MTK_TINY_UTIL = yes
 MTK_TOUCH_BOOST = no
 MTK_TRANSPARENT_BAR_SUPPORT = no
-MTK_TTY_SUPPORT = no
+MTK_TTY_SUPPORT = yes
 MTK_TVOUT_SUPPORT = no
 MTK_UART_USB_SWITCH = no
 MTK_ULTRA_DIMMING_SUPPORT = no
diff --git a/vendor/mediatek/proprietary/custom/lcsh6795_lwt_l/hal/audioflinger/audio/Audio_Customization_Common.h b/vendor/mediatek/proprietary/custom/lcsh6795_lwt_l/hal/audioflinger/audio/Audio_Customization_Common.h
index 6f09a4c..24ae921 100644
--- a/vendor/mediatek/proprietary/custom/lcsh6795_lwt_l/hal/audioflinger/audio/Audio_Customization_Common.h
+++ b/vendor/mediatek/proprietary/custom/lcsh6795_lwt_l/hal/audioflinger/audio/Audio_Customization_Common.h
@@ -56,7 +56,7 @@
 /***************************************************
 *(1)->Use Ref Mic as main mic; (0)->Use original main mic.
 *****************************************************/
-#define USE_REFMIC_IN_LOUDSPK       (0)
+#define USE_REFMIC_IN_LOUDSPK       (1)
 
 /****************************************************
 * Define this will enable audio compensation filter for loudspeaker
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRef.cpp b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRef.cpp
index 184385f..5eed2f8 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRef.cpp
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRef.cpp
@@ -24,8 +24,8 @@ namespace android
  *============================================================================*/
 
 //static const uint32_t kReadBufferSize = 0x1E00; // 48K\stereo\40ms data (framebase: get 40ms data/per time)
-static const uint32_t kReadBufferSize = ((0x1E00) / 2); // 44.1K\stereo\20ms data (framebase: get 20ms data/per time), downlink sample rate(DL1) and fullfil 64byte alignment
-
+//static const uint32_t kReadBufferSize = ((0x1E00) / 2); // 44.1K\stereo\20ms data (framebase: get 20ms data/per time), downlink sample rate(DL1) and fullfil 64byte alignment
+static const uint32_t kReadBufferSize = 0x1B80 / 2;
 
 
 /*==============================================================================
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRefExt.cpp b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRefExt.cpp
index dd4a021..0d73b19 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRefExt.cpp
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSACaptureDataProviderEchoRefExt.cpp
@@ -25,7 +25,7 @@ namespace android
  *                     Constant
  *============================================================================*/
 
-static const uint32_t kReadBufferSize = 0x1E00; // 44.1K\stereo\40ms data (framebase: get 40ms data/per time), downlink sample rate(DL1)
+static const uint32_t kReadBufferSize = 0x1B80 / 2; // 44.1K\stereo\40ms data (framebase: get 40ms data/per time), downlink sample rate(DL1)
 
 
 /*==============================================================================
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSAHardware.cpp b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSAHardware.cpp
index 039b7d1..42f4605 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSAHardware.cpp
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/aud_drv/AudioALSAHardware.cpp
@@ -81,6 +81,9 @@ static String8 keySetTDMRecEnable       = String8("SetTDMRecEnable");
 //record left/right channel switch
 //only support on dual MIC for switch LR input channel for video record when the device rotate
 static String8 keyLR_ChannelSwitch = String8("LRChannelSwitch");
+//force use Min MIC or Ref MIC data
+//only support on dual MIC for only get main Mic or Ref Mic data
+static String8 keyForceUseSpecificMicData = String8("ForceUseSpecificMic");
 
 // BesRecord Related
 static String8 keyHDREC_SET_VOICE_MODE = String8("HDREC_SET_VOICE_MODE");
@@ -1118,6 +1121,23 @@ status_t AudioALSAHardware::setParameters(const String8 &keyValuePairs)
         bForceUseLoudSpeakerInsteadOfReceiver = value & 0x1;
     }
 
+    //only support on dual MIC for only get main Mic or Ref Mic data
+    if (param.getInt(keyForceUseSpecificMicData, value) == NO_ERROR)
+    {
+#ifdef MTK_DUAL_MIC_SUPPORT
+        ALOGD("keyForceUseSpecificMic=%d", value);
+        if (value == 1)
+            AudioALSAHardwareResourceManager::getInstance()->setBuiltInMicSpecificType(BUILTIN_MIC_MIC1_ONLY);
+        else if (value == 2)
+            AudioALSAHardwareResourceManager::getInstance()->setBuiltInMicSpecificType(BUILTIN_MIC_MIC2_ONLY);
+        else
+            AudioALSAHardwareResourceManager::getInstance()->setBuiltInMicSpecificType(BUILTIN_MIC_DEFAULT);
+#else
+        ALOGD("only support in dual MIC");
+#endif
+        param.remove(keyForceUseSpecificMicData);
+    }
+
     // Assign delay frame for modem loopback // 1 frame = 20ms
     if (param.getInt(keySET_LOOPBACK_MODEM_DELAY_FRAMES, value) == NO_ERROR)
     {
@@ -2565,15 +2585,15 @@ status_t AudioALSAHardware::GetAudioCommonData(int par1, size_t len, void *ptr)
             break;
         }
 #if defined(MTK_AUDIO_GAIN_TABLE_BT)
-		case GET_BT_NREC_DISP:
-		{
-			ASSERT(len == sizeof(PCDispItem));
-			if (NULL != mAudioALSAParamTunerInstance)
-			{
-				mAudioALSAParamTunerInstance->getBtNrecInfoForDisp(ptr);
-			}
-			break;
-		} 
+        case GET_BT_NREC_DISP:
+        {
+            ASSERT(len == sizeof(PCDispItem));
+            if (NULL != mAudioALSAParamTunerInstance)
+            {
+                mAudioALSAParamTunerInstance->getBtNrecInfoForDisp(ptr);
+            }
+            break;
+        }
 #endif
 #endif
         default:
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioALSAHardwareResourceManager.h b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioALSAHardwareResourceManager.h
index acff8d4..4abcdbc 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioALSAHardwareResourceManager.h
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioALSAHardwareResourceManager.h
@@ -154,6 +154,7 @@ class AudioALSAHardwareResourceManager
         bool GetExtDacPropertyEnable(void);
 
         AudioLock mLock;
+        AudioLock mGetInstanceLock;
 
         struct mixer *mMixer;
         struct pcm *mPcmDL;
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioVolumeInterface.h b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioVolumeInterface.h
index 5f5a508..a9f3cf0 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioVolumeInterface.h
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/AudioVolumeInterface.h
@@ -102,7 +102,7 @@ class AudioVolumeInterface
         */
         virtual int ApplyAudioGainTuning(int Gain, uint32_t mode, uint32_t device) = 0;
 
-		/**
+        /**
         * volume controller SetSideTone
         * base on mode gain and route to decide sidetone gain
         * @param Mode
@@ -228,18 +228,18 @@ class AudioVolumeInterface
 
         virtual status_t ApplySideTone(uint32_t Mode) = 0 ;
         // alsa driver set pga gain function
-        virtual void SetReceiverGain(uint32_t DrgradeDb) = 0 ;
-        virtual void SetHeadPhoneRGain(uint32_t DrgradeDb) = 0 ;
-        virtual void SetHeadPhoneLGain(uint32_t DrgradeDb) = 0 ;
-        virtual void SetLinoutRGain(uint32_t DrgradeDb) = 0 ;
-        virtual void SetLinoutLGain(uint32_t DrgradeDb) = 0 ;
-        virtual void SetSpeakerGain(uint32_t DegradedBGain) = 0 ;
+        virtual void SetReceiverGain(int DrgradeDb) = 0 ;
+        virtual void SetHeadPhoneRGain(int DrgradeDb) = 0 ;
+        virtual void SetHeadPhoneLGain(int DrgradeDb) = 0 ;
+        virtual void SetLinoutRGain(int DrgradeDb) = 0 ;
+        virtual void SetLinoutLGain(int DrgradeDb) = 0 ;
+        virtual void SetSpeakerGain(int DegradedBGain) = 0 ;
         
         #ifdef MTK_AUDIO_GAIN_TABLE
-	  virtual status_t setAnalogVolume(int stream, int device, int index,audio_mode_t mode) = 0;
+        virtual status_t setAnalogVolume(int stream, int device, int index,audio_mode_t mode) = 0;
         virtual status_t speechBandChange(bool nb) = 0;
         virtual bool isNbSpeechBand(void) = 0;
-        virtual status_t setBtVolumeCapability(bool support) = 0;		
+        virtual status_t setBtVolumeCapability(bool support) = 0;
         #endif
 };
 
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/SpeechMessengerECCCI.h b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/SpeechMessengerECCCI.h
index c5644b7..37375c5 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/SpeechMessengerECCCI.h
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/include/SpeechMessengerECCCI.h
@@ -155,6 +155,7 @@ class SpeechMessengerECCCI : public SpeechMessengerInterface
 
         bool mIsModemResetDuringPhoneCall;
         bool mIsModemReset;
+        bool mIsModemEPOF; // 1=MD power off
         record_type_t mPcmRecordType;
 
 };
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/speech_driver/SpeechMessengerECCCI.cpp b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/speech_driver/SpeechMessengerECCCI.cpp
index 6ea993b..232e14a 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/speech_driver/SpeechMessengerECCCI.cpp
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/V3/speech_driver/SpeechMessengerECCCI.cpp
@@ -163,6 +163,7 @@ status_t SpeechMessengerECCCI::Initial()
 
     mIsModemResetDuringPhoneCall = false;
     mIsModemReset = false;
+    mIsModemEPOF = false;
     mPcmRecordType = RECORD_TYPE_UL;
 
     /* create the CCCI event reading thread */
@@ -299,8 +300,10 @@ char SpeechMessengerECCCI::GetModemCurrentStatus()
     unsigned int  status = (unsigned int)MODEM_STATUS_INVALID;
 
     int retval = ::ioctl(fHdl, CCCI_IOC_GET_MD_STATE, &status);
-    if (retval < 0)
-    {
+    if (mIsModemEPOF == true) {
+        ALOGD("%s() MD EPOF!", __FUNCTION__);
+        status = MODEM_STATUS_INVALID;
+    } else if (retval < 0) {
         ALOGE("%s() ioctl CCCI_IOC_GET_MD_STATE fail!! retval = %d, errno: %d", __FUNCTION__, retval, errno);
         status = MODEM_STATUS_EXPT;
     }
@@ -367,7 +370,7 @@ int32_t SpeechMessengerECCCI::SendMessage(const ccci_buff_t &ccci_buff)
     char modem_status = GetModemCurrentStatus();
     if (modem_status != MODEM_STATUS_READY)
     {
-        ALOGE("%s(), modem_status(%d) != MODEM_STATUS_READY, errno: %d", __FUNCTION__, modem_status, errno);
+        ALOGE("%s(), modem_status(%d) != MODEM_STATUS_READY, errno: %d, mIsModemEPOF = %d", __FUNCTION__, modem_status, errno, mIsModemEPOF);
         mIsModemResetDuringPhoneCall = true;
         mIsModemReset = true;
         ResetSpeechParamAckCount();
@@ -498,6 +501,7 @@ int32_t SpeechMessengerECCCI::SendMessage(const ccci_buff_t &ccci_buff)
 status_t SpeechMessengerECCCI::ReadMessage(ccci_buff_t &ccci_buff)
 {
     uint32_t length_payload, modem_status, temp_msg1, temp_msg2;
+    uint16_t message_id;
     ALOGV("%s()", __FUNCTION__);
 
     /* check if already initialized */
@@ -519,11 +523,16 @@ status_t SpeechMessengerECCCI::ReadMessage(ccci_buff_t &ccci_buff)
     {
         ALOGD("ReadMessage ECCCI, length_read=%d, data[0](magic)=0x%x, data[1](message)=0x%x, ch=0x%x, reserved=0x%x", length_read, ccci_buff.magic, ccci_buff.message, ccci_buff.channel, ccci_buff.reserved);
     }
+    message_id = GetMessageID(ccci_buff);
+
+    if (message_id == MSG_M2A_EM_DATA_REQUEST)
+        mIsModemEPOF = false;
+
     modem_status = GetModemCurrentStatus();
 
     if (length_read != -1  && modem_status != MODEM_STATUS_READY)
     {
-        ALOGE("%s() fail, read_length: %d, modem current status: %d, errno: %d", __FUNCTION__, length_read, modem_status, errno);
+        ALOGE("%s() fail, read_length: %d, modem current status: %d, errno: %d, mIsModemEPOF(%d)", __FUNCTION__, length_read, modem_status, errno, mIsModemEPOF);
         return UNKNOWN_ERROR;
     }
     return NO_ERROR;
@@ -1386,7 +1395,7 @@ void *SpeechMessengerECCCI::CCCIReadThread(void *arg)
                 }
                 pCCCI->mIsModemResetDuringPhoneCall = false;
                 pCCCI->mIsModemReset = false;
-
+                pCCCI->mIsModemEPOF = false;
                 // Create Send Sph Para Thread
                 pCCCI->CreateSendSphParaThread();
 
@@ -1433,6 +1442,20 @@ void *SpeechMessengerECCCI::CCCIReadThread(void *arg)
                 break;
             }
 
+            case MSG_M2A_EPOF_NOTIFY: { // Modem reset. Requset for all EM data(NB/DMNR/WB)
+                ALOGW("..[MD EPOF Notify(MSG_M2A_EPOF_NOTIFY: 0x%x)]..", ccci_buff.message);
+
+                // Check the first message in queue. If need ack, take action.
+                pCCCI->MDReset_CheckMessageInQueue();
+
+                // Modem reset, flush all CCCI queue first. Don't care for the CCCI queue.
+                pCCCI->MDReset_FlushMessageInQueue();
+
+                pCCCI->SendMessage(pCCCI->InitCcciMailbox(MSG_A2M_EPOF_ACK, 0, 0));
+                pCCCI->mIsModemEPOF = true;
+
+                break;
+            }
             default:
             {
                 //TINA REMOVE TEMP
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/include/SpeechMessengerInterface.h b/vendor/mediatek/proprietary/platform/common/hardware/audio/include/SpeechMessengerInterface.h
index e8a345e..850b311 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/include/SpeechMessengerInterface.h
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/include/SpeechMessengerInterface.h
@@ -297,6 +297,8 @@ enum ccci_message_id_t
     MSG_A2M_NETWORK_STATUS_ACK,
     MSG_A2M_QUERY_RF_INFO,
     MSG_A2M_EM_HAC,    
+    MSG_A2M_EPOF_ACK,
+
     MSG_A2M_VIBSPK_PARAMETER = CCCI_MSG_A2M_BASE | 0x80,
     MSG_A2M_NXP_SMARTPA_PARAMETER,
 
@@ -366,7 +368,8 @@ enum ccci_message_id_t
     MSG_M2A_NETWORK_STATUS_NOTIFY,
     MSG_M2A_QUERY_RF_INFO_ACK,
     MSG_M2A_EM_HAC_ACK,
-    
+    MSG_M2A_EPOF_NOTIFY,
+
     MSG_M2A_VIBSPK_PARAMETER_ACK = CCCI_MSG_M2A_BASE + 0x80,
     MSG_M2A_NXP_SMARTPA_PARAMETER_ACK,
 };
diff --git a/vendor/mediatek/proprietary/platform/common/hardware/audio/speech_driver/SpeechEnhancementController.cpp b/vendor/mediatek/proprietary/platform/common/hardware/audio/speech_driver/SpeechEnhancementController.cpp
index 01f3fd8..a4d7e32 100644
--- a/vendor/mediatek/proprietary/platform/common/hardware/audio/speech_driver/SpeechEnhancementController.cpp
+++ b/vendor/mediatek/proprietary/platform/common/hardware/audio/speech_driver/SpeechEnhancementController.cpp
@@ -14,6 +14,7 @@
 
 static const char PROPERTY_KEY_SPH_ENH_MASKS[PROPERTY_KEY_MAX] = "persist.af.modem.sph_enh_mask";
 static const char PROPERTY_KEY_MAGIC_CON_CALL_ON[PROPERTY_KEY_MAX] = "persist.af.magic_con_call_on";
+static const char PROPERTY_HAC_ON[PROPERTY_KEY_MAX] = "persist.af.hac_on";
 static const char PROPERTY_KEY_BT_HEADSET_NREC_ON[PROPERTY_KEY_MAX] = "persist.af.bt_headset_nrec_on";
 static const char PROPERTY_KEY_HAC_ON[PROPERTY_KEY_MAX] = "persist.af.hac_on";
 
@@ -65,6 +66,11 @@ SpeechEnhancementController::SpeechEnhancementController()
     property_get(PROPERTY_KEY_MAGIC_CON_CALL_ON, magic_conference_call_on, "0"); //"0": default off
     mMagicConferenceCallOn = (magic_conference_call_on[0] == '0') ? false : true;
 
+    // HAC on
+    char hac_on[PROPERTY_VALUE_MAX];
+    property_get(PROPERTY_HAC_ON, hac_on, "0"); //"0": default off
+    mHACOn = (magic_conference_call_on[0] == '0') ? false : true;
+
     // BT Headset NREC
     char bt_headset_nrec_on[PROPERTY_VALUE_MAX];
     property_get(PROPERTY_KEY_BT_HEADSET_NREC_ON, bt_headset_nrec_on, "1"); //"1": default on
diff --git a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAHardwareResourceManager.cpp b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAHardwareResourceManager.cpp
index c580601..f436935 100644
--- a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAHardwareResourceManager.cpp
+++ b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAHardwareResourceManager.cpp
@@ -236,6 +236,7 @@ void AudioALSAHardwareResourceManager::setMIC2Mode(bool isphonemic)
 status_t AudioALSAHardwareResourceManager::startInputDevice(const audio_devices_t new_device)
 {
     ALOGD("+%s(), new_device = 0x%x, mInputDevice = 0x%x, mStartInputDeviceCount = %d", __FUNCTION__, new_device, mInputDevice, mStartInputDeviceCount);
+    AudioAutoTimeoutLock _l(mGetInstanceLock);
 
     if (((mInputDevice & new_device) & ~AUDIO_DEVICE_BIT_IN) != 0)
     {
@@ -404,6 +405,7 @@ status_t AudioALSAHardwareResourceManager::startInputDevice(const audio_devices_
 status_t AudioALSAHardwareResourceManager::stopInputDevice(const audio_devices_t stop_device)
 {
     ALOGD("+%s(), mInputDevice = 0x%x, stop_device = 0x%x, mStartInputDeviceCount = %d", __FUNCTION__, mInputDevice, stop_device, mStartInputDeviceCount);
+    AudioAutoTimeoutLock _l(mGetInstanceLock);
 
     if (((mInputDevice & stop_device) & ~AUDIO_DEVICE_BIT_IN) == 0)
     {
diff --git a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAVolumeController.cpp b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAVolumeController.cpp
index 0a7b409..79e2d04 100644
--- a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAVolumeController.cpp
+++ b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/aud_drv/AudioALSAVolumeController.cpp
@@ -37,7 +37,7 @@ static const char *DL_PGA_LINEOUT_GAIN[] = {"8Db", "7Db", "6Db", "5Db", "4Db", "
                                             "-4Db", "-5Db", "-6Db", "-7Db", "-8Db", "-9Db", "-10Db" , "-40Db"
                                            };
 
-static const char *DL_PGA_SPEAKER_GAIN[] = {"4Db", "5Db", "6Db", "7Db", "8Db", "9Db", "10Db",
+static const char *DL_PGA_SPEAKER_GAIN[] = {"MUTE", "0Db", "4Db", "5Db", "6Db", "7Db", "8Db", "9Db", "10Db",
                                             "11Db", "12Db", "13Db", "14Db", "15Db", "16Db", "17Db"
                                            };
 
@@ -250,6 +250,22 @@ static const uint16_t DlDigital_Gain_Map_Ver2[(VOICE_VOLUME_MAX / VOICE_ONEDB_ST
     10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
 };
 
+static const uint16_t Headphones_MIUI[(VOICE_VOLUME_MAX / VOICE_ONEDB_STEP) + 1] =
+{
+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
+    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
+    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
+    30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40
+};
+
+static const uint16_t Headphones_MIUI_2[(VOICE_VOLUME_MAX / VOICE_ONEDB_STEP) + 1] =
+{
+    6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
+};
+
 // HW Gain mappring
 static const uint32_t kHWGainMap[] =
 {
@@ -607,33 +623,6 @@ void AudioALSAVolumeController::ApplyMdDlGain(int32_t degradeDb)
     }
 #endif
     ALOGD("ApplyMdDlGain degradeDb = %d oldDlgain = %d checkvalue = %d", degradeDb,oldDlgain,checkvalue);
-    if(oldDlgain != checkvalue)
-    {
-        oldDlgain = oldDlgain * -1;
-        oldDlgain = oldDlgain >>2;
-        int offset = (oldDlgain -degradeDb);
-        int step =0;
-        if(offset > 0)
-        {
-            step = -1;
-        }
-        else if (offset==0)
-        {
-            step = 0;
-        }
-        else
-        {
-            step = 1;
-        }
-        ALOGD("ApplyMdDlGain oldDlgain = 0x%x",oldDlgain);
-        while(offset != 0)
-        {
-            SpeechDriverFactory::GetInstance()->GetSpeechDriver()->SetDownlinkGain((-1 * oldDlgain) << 2); // degrade db * 4
-            oldDlgain += step;
-            offset+= step;
-            usleep(4*1000);
-        }
-    }
     SpeechDriverFactory::GetInstance()->GetSpeechDriver()->SetDownlinkGain((-1 * degradeDb) << 2); // degrade db * 4
 }
 
@@ -651,33 +640,6 @@ void AudioALSAVolumeController::ApplyMdDlEhn1Gain(int32_t Gain)
     }
 #endif
     ALOGD("ApplyMdDlGain degradeDb = %d oldDlgain = %d checkvalue = %d", Gain,oldDlgain,checkvalue);
-    if(oldDlgain != checkvalue)
-    {
-        oldDlgain = oldDlgain * -1;
-        oldDlgain = oldDlgain >>2;
-        int offset = (oldDlgain -Gain);
-        int step =0;
-        if(offset > 0)
-        {
-            step = -1;
-        }
-        else if (offset==0)
-        {
-            step = 0;
-        }
-        else
-        {
-            step = 1;
-        }
-        ALOGD("ApplyMdDlGain oldDlgain = 0x%x",oldDlgain);
-        while(offset != 0)
-        {
-            SpeechDriverFactory::GetInstance()->GetSpeechDriver()->SetDownlinkGain((-1 * oldDlgain) << 2); // degrade db * 4
-            oldDlgain += step;
-            offset+= step;
-            usleep(4*1000);
-        }
-    }
     SpeechDriverFactory::GetInstance()->GetSpeechDriver()->SetEnh1DownlinkGain(-1 * (Gain) << 2); // degrade db * 4
 }
 
@@ -1032,141 +994,220 @@ status_t AudioALSAVolumeController::initVolumeController()
     return NO_ERROR;
 }
 
-void AudioALSAVolumeController::SetReceiverGain(uint32_t DegradedBGain)
+void AudioALSAVolumeController::SetReceiverGain(int DegradedBGain)
 {
-    ALOGD("SetReceiverGain = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     ctl = mixer_get_ctl_by_name(mMixer, "Handset_PGA_GAIN");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_Handset_GAIN))
+        DegradedBGain = _countof(DL_PGA_Handset_GAIN)-1;
+ 
+    ALOGD("SetRealReceiverGain = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_Handset_GAIN[DegradedBGain]))
     {
         ALOGE("Error: Handset_PGA_GAIN invalid value");
     }
 }
 int GetReceiverGain(void);
-
-void AudioALSAVolumeController::SetHeadPhoneLGain(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetHeadPhoneLGain(int DegradedBGain)
 {
-    ALOGD("SetHeadPhoneLGain = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     ctl = mixer_get_ctl_by_name(mMixer, "Headset_PGAL_GAIN");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_Headset_GAIN))
+        DegradedBGain = _countof(DL_PGA_Headset_GAIN)-1;
+ 
+    ALOGD("SetRealHeadPhoneLGain = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_Headset_GAIN[DegradedBGain]))
     {
         ALOGE("Error: Headset_PGAL_GAIN invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetHeadPhoneRGain(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetHeadPhoneRGain(int DegradedBGain)
 {
-    ALOGD("SetHeadPhoneRGain = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     ctl = mixer_get_ctl_by_name(mMixer, "Headset_PGAR_GAIN");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_Headset_GAIN))
+        DegradedBGain = _countof(DL_PGA_Headset_GAIN)-1;
+ 
+    ALOGD("SetRealHeadPhoneRGain = %d", DegradedBGain);
+ 
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_Headset_GAIN[DegradedBGain]))
     {
         ALOGE("Error: Headset_PGAL_GAIN invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetLinoutRGain(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetLinoutRGain(int DegradedBGain)
 {
-    ALOGD("SetLinoutRGain \n");
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     ctl = mixer_get_ctl_by_name(mMixer, "Lineout_PGAR_GAIN");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+   
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_LINEOUT_GAIN))
+        DegradedBGain = _countof(DL_PGA_LINEOUT_GAIN)-1;
+ 
+    ALOGD("SetRealLinoutRGain = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_LINEOUT_GAIN[DegradedBGain]))
     {
         ALOGE("Error: SetLinoutLGain invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetLinoutLGain(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetLinoutLGain(int DegradedBGain)
 {
-    ALOGD("SetLinoutRGain \n");
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     ctl = mixer_get_ctl_by_name(mMixer, "Lineout_PGAL_GAIN");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+   
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_LINEOUT_GAIN))
+        DegradedBGain = _countof(DL_PGA_LINEOUT_GAIN)-1;
+ 
+    ALOGD("SetRealLinoutRGain = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_LINEOUT_GAIN[DegradedBGain]))
     {
         ALOGE("Error: SetLinoutLGain invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetSpeakerGain(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetSpeakerGain(int DegradedBGain)
 {
-    ALOGD("SetLSpeakerGain \n");
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     int index = _countof(DL_PGA_SPEAKER_GAIN) - 1;
     ctl = mixer_get_ctl_by_name(mMixer, "Audio_Speaker_PGA_gain");
     type = mixer_ctl_get_type(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+   
+    if ((uint32_t)DegradedBGain >= _countof(DL_PGA_SPEAKER_GAIN))
+        DegradedBGain = _countof(DL_PGA_SPEAKER_GAIN)-1;
+ 
+    ALOGD("SetRealLSpeakerGain = %d", DegradedBGain);
+ 
     if (mixer_ctl_set_enum_by_string(ctl, DL_PGA_SPEAKER_GAIN[index - DegradedBGain]))
     {
         ALOGE("Error: SetSpeakerGain invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetAdcPga1(uint32_t DegradedBGain)
+ 
+void AudioALSAVolumeController::SetAdcPga1(int DegradedBGain)
 {
-    ALOGD("SetAdcPga1 = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     int num_values = 0;
     ctl = mixer_get_ctl_by_name(mMixer, "Audio_PGA1_Setting");
     type = mixer_ctl_get_type(ctl);
     num_values = mixer_ctl_get_num_values(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(PGA_Gain_String))
+        DegradedBGain = _countof(PGA_Gain_String)-1;
+ 
+    ALOGD("SetRealAdcPga1 = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, PGA_Gain_String[DegradedBGain]))
     {
         ALOGE("Error: Audio_PGA1_Setting invalid value");
     }
 }
-
-void AudioALSAVolumeController::SetAdcPga2(uint32_t DegradedBGain)
+void AudioALSAVolumeController::SetAdcPga2(int DegradedBGain)
 {
-    ALOGD("SetAdcPga2 = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     int num_values = 0;
-
+ 
     ctl = mixer_get_ctl_by_name(mMixer, "Audio_PGA2_Setting");
     type = mixer_ctl_get_type(ctl);
     num_values = mixer_ctl_get_num_values(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(PGA_Gain_String))
+        DegradedBGain = _countof(PGA_Gain_String)-1;
+ 
+    ALOGD("SetRealAdcPga2 = %d", DegradedBGain);
+
     if (mixer_ctl_set_enum_by_string(ctl, PGA_Gain_String[DegradedBGain]))
     {
         ALOGE("Error: Audio_PGA2_Setting invalid value");
     }
 }
-void AudioALSAVolumeController::SetAdcPga3(uint32_t DegradedBGain)
+void AudioALSAVolumeController::SetAdcPga3(int DegradedBGain)
 {
-    ALOGD("SetAdcPga3 = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     int num_values = 0;
-
+ 
     ctl = mixer_get_ctl_by_name(mMixer, "Audio_PGA3_Setting");
     type = mixer_ctl_get_type(ctl);
     num_values = mixer_ctl_get_num_values(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(PGA_Gain_String))
+        DegradedBGain = _countof(PGA_Gain_String)-1;
+ 
+    ALOGD("SetRealAdcPga3 = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, PGA_Gain_String[DegradedBGain]))
     {
         ALOGE("Error: Audio_PGA3_Setting invalid value");
     }
 }
-void AudioALSAVolumeController::SetAdcPga4(uint32_t DegradedBGain)
+void AudioALSAVolumeController::SetAdcPga4(int DegradedBGain)
 {
-    ALOGD("SetAdcPga4 = %d", DegradedBGain);
     struct mixer_ctl *ctl;
     enum mixer_ctl_type type;
     int num_values = 0;
-
+ 
     ctl = mixer_get_ctl_by_name(mMixer, "Audio_PGA4_Setting");
     type = mixer_ctl_get_type(ctl);
     num_values = mixer_ctl_get_num_values(ctl);
+ 
+    if (DegradedBGain < 0)
+        DegradedBGain = 0;
+ 
+    if ((uint32_t)DegradedBGain >= _countof(PGA_Gain_String))
+        DegradedBGain = _countof(PGA_Gain_String)-1;
+ 
+    ALOGD("SetRealAdcPga4 = %d", DegradedBGain);
+   
     if (mixer_ctl_set_enum_by_string(ctl, PGA_Gain_String[DegradedBGain]))
     {
         ALOGE("Error: Audio_PGA4_Setting invalid value");
@@ -1363,6 +1404,8 @@ void AudioALSAVolumeController::ApplyAudioGain(int Gain, uint32_t mode, uint32_t
     }
     else if ((device  == Audio_DualMode_Headset) || (device == Audio_DualMode_Headphone))
     {
+        if (DegradedBGain > (int)(_countof(DL_PGA_Headset_GAIN) - 1))
+            DegradedBGain = _countof(DL_PGA_Headset_GAIN) - 1;
         SetHeadPhoneLGain(DegradedBGain);
         SetHeadPhoneRGain(DegradedBGain);
     }
@@ -1390,9 +1433,8 @@ void AudioALSAVolumeController::ApplyAmpGain(int Gain, uint32_t mode, uint32_t d
     int DegradedBGain = mVolumeRange[device];
     DegradedBGain = DegradedBGain + (DEVICE_VOLUME_RANGE - DegradedBGain) * ((VOLUME_MAPPING_STEP - Gain) / VOLUME_MAPPING_STEP);
     // set line out buffer to 0Db.
-    SetLinoutLGain(LINE_OUT_BUFFER_ODB_INDEX);
-    SetLinoutRGain(LINE_OUT_BUFFER_ODB_INDEX);
-    SetSpeakerGain(DegradedBGain);
+    SetLinoutLGain(DegradedBGain);
+    SetLinoutRGain(DegradedBGain);
 }
 
 // cal and set and set analog gain
@@ -1819,10 +1861,8 @@ status_t AudioALSAVolumeController::setVoiceVolume(float v, audio_mode_t mode, u
     }
     if (device & AUDIO_DEVICE_OUT_WIRED_HEADSET ||  device & AUDIO_DEVICE_OUT_WIRED_HEADPHONE)
     {
-        if (VoiceAnalogRange >= (_countof(DL_PGA_Headset_GAIN) - 1))
-        {
-            VoiceAnalogRange = _countof(DL_PGA_Headset_GAIN) - 1;
-        }
+        DigitalgradeDb = Headphones_MIUI[degradeDb];
+        VoiceAnalogRange = Headphones_MIUI_2[degradeDb] > 18 ? 19 : Headphones_MIUI_2[degradeDb];
         if (ModeSetVoiceVolume(mode) == true) //HP switch, phone call mode always use internal DAC
         {
             ApplyMdDlGain(DigitalgradeDb);
diff --git a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/include/AudioALSAVolumeController.h b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/include/AudioALSAVolumeController.h
index c74e3a2..8e112e5 100644
--- a/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/include/AudioALSAVolumeController.h
+++ b/vendor/mediatek/proprietary/platform/mt6795/hardware/audio/include/AudioALSAVolumeController.h
@@ -265,12 +265,12 @@ class AudioALSAVolumeController : public AudioVolumeInterface
         bool GetHeadPhoneImpedance(void);
         
         // alsa driver set pga gain function
-        void SetReceiverGain(uint32_t DrgradeDb);
-        void SetHeadPhoneRGain(uint32_t DrgradeDb);
-        void SetHeadPhoneLGain(uint32_t DrgradeDb);
-        void SetLinoutRGain(uint32_t DrgradeDb);
-        void SetLinoutLGain(uint32_t DrgradeDb);
-        void SetSpeakerGain(uint32_t DegradedBGain);
+        void SetReceiverGain(int DrgradeDb);
+        void SetHeadPhoneRGain(int DrgradeDb);
+        void SetHeadPhoneLGain(int DrgradeDb);
+        void SetLinoutRGain(int DrgradeDb);
+        void SetLinoutLGain(int DrgradeDb);
+        void SetSpeakerGain(int DegradedBGain);
 
     private:
         static AudioALSAVolumeController *UniqueVolumeInstance;
@@ -297,10 +297,10 @@ class AudioALSAVolumeController : public AudioVolumeInterface
 
         bool ModeSetVoiceVolume(int mode);
         uint32_t GetDRCVersion(uint32_t device);
-        void SetAdcPga1(uint32_t DrgradeDb);
-        void SetAdcPga2(uint32_t DrgradeDb);
-        void SetAdcPga3(uint32_t DrgradeDb);
-        void SetAdcPga4(uint32_t DrgradeDb);
+        void SetAdcPga1(int DrgradeDb);
+        void SetAdcPga2(int DrgradeDb);
+        void SetAdcPga3(int DrgradeDb);
+        void SetAdcPga4(int DrgradeDb);
         void SetInternalSpkGain(int degradeDb);
         void SetExternalSpkGain(int degradeDb);
 
-- 
1.9.1

